package com.itheima02_设计模式;
/*
单例模式概述
    1.介绍
        Java 中的设计模式有23种，常见有单例、多例、工厂、代理、装饰者等
        单例模式（Singleton Pattern），属于创建型模式，提供了一种创建对象的最佳方式。
        作用：保证在程序运行期间,某个类有且仅能创建一个对象,从而节省内存资源。
    2.特点
        ①将构造方法私有化,确保在类的外部不能通过new来创建对象
        ②在本类中创建该类的对象
        ③提供公共的访问方式来访问该类的唯一对象静态方法
    3.实现方式分类
        饿汉模式类加载到内存中时，就将类的对象创建好，以备使用，且对象不能再新建。
        懒汉模式在需要使用对象的时候，通过指定方法获取创建的对象，且对象只能创建这一次。
饿汉式实现步骤
    ①将构造方法私有化，使其不能在类的外部通过new关键字创建该类对象。
    ②定义一个本类类型的成员属性，并且创建对象；使用private  static final修饰；
    ③定义一个公共,静态方法,返回这个唯一对象。
    需求:定义一个饿汉式单例模式的类，演示饿汉式单例模式的使用。
懒汉式实现步骤
    ①构造方法私有化；
    ②内部定义私有、静态本类类型成员属性，不初始化；
    ③提供公有、静态方法，获取此对象引用；
    ④在方法内，先判断成员属性是否被初始化；
     	否  初始化；
     	是  返回这个引用。
    需求:定义一个懒汉式单例模式的类，演示懒汉式单例模式的使用。
 */
 public  class Test_01单例模式 {
    public static void main(String[] args) {

    }
}
