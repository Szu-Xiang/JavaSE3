package com.itheima03_多态.p01多态入门;

/*
多态概述
    1.介绍
    	多态是继封装、继承之后的面向对象的第三大特征。
    	多态指对于同一行为，对于不同的事物，须有不同的表现形式。在程序中，表示对同一方法，不同的对象有不同实现。
    2.多态的前提
        继承或者实现【二选一】
        父类/接口引用指向子类/实现类对象【格式体现】
        方法的重写【意义体现：不重写，无意义】
    3.多态的体现格式
        父类/接口类型 对象名 = new 子类/实现类对象；
多态使用特点
    1.访问格式:
    	对象名.成员变量;
    	对象名.方法名();
    2.访问特点
            成员变量:编译看左边,运行看左边  (编译时看父类,运行时找父类)
            成员方法:编译看左边,运行看右边  (编译时看父类,运行时找子类)
            静态方法:编译看左边,运行看左边  (编译时看父类,运行时找父类)。

多态时继封装、继承之后的面向对象的第三大特征。
多态指对于同一行为，须有不同的表现形式。在程序中，表示对同一方法，不同的对象有不同实现。
多态的前提
    继承或者实现【二选一】
    父类引用指向实现类对象【格式体现】
    方法的重写【意义体现：不重写，无意义】
多态的体现格式
    父类/接口类型 对象名 = new 子类/实现类对象；

需求:
        动物
            行为:吃
        猫
            行为:吃鱼
        狗
            行为:吃骨头
 */
public class Test {
    public static void main(String[] args) {
        Animal a = new Cat();
        a.eat();

        a = new Dog();
        a.eat();
    }
}
